import os
import time
import subprocess
from scapy.all import sniff, wrpcap
import joblib
import pandas as pd
import tkinter as tk
from tkinter import messagebox
start_path = f"{os.getcwd()}\\output\\pcap"
model = joblib.load(start_path[:-11] + "\\model\\random_forest_model.pkl")


def show_error(message):
    popup = tk.Tk()
    popup.withdraw()  # Hide the main window (if it appears briefly)
    popup.wm_attributes("-topmost", 1)  # Ensure pop-up stays on top
    popup.after(0, lambda: messagebox.showinfo("Danger", message))
    popup.mainloop()


def run_flow_analysis(output_folder_path1):
    cd_command = start_path[:-11] + "\\bin"
    os.chdir(cd_command)
    bat_command = f'cfm.bat "{output_folder_path1}" "{output_folder_path1[:-4]}\\csv"'
    try:
        subprocess.run(bat_command, shell=True, check=True)
        csv_file_path = output_folder_path1  # os.path.join(output_folder_path[:-4], "csv", "flow.csv")
        return csv_file_path
    except subprocess.CalledProcessError:
        return None


def capture_packets(interface, output_folder, duration):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    timestamp = time.strftime("%Y--%m--%d_%H-%M")
    output_filename = os.path.join(output_folder, f"{timestamp}.pcap")
    try:
        packets = sniff(iface=interface, timeout=duration, store=True)
        wrpcap(output_filename, packets)
        return output_filename
    except KeyboardInterrupt:
        return None


def delete_files(csv_file_path):
    try:
        os.remove(csv_file_path)
    except Exception:
        pass


def process_csv_file(csv_file_path):
    global model
    try:
        df = pd.read_csv(csv_file_path)
        df = df.drop(columns=['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Protocol', 'Timestamp', 'Label'])
        op = model.predict(df)
        delete_files(csv_file_path)
        for i in op:
            if i != 0:
                return i
        return 0
    except Exception:
        delete_files(csv_file_path)
        return 0


def loop_comp(interface, output_folder_path2, capture_duration1, wait_duration1):
    while True:
        captured_file = capture_packets(interface, output_folder_path2, capture_duration1)
        if captured_file is not None:
            csv_file_path = run_flow_analysis(output_folder_path2)
            if csv_file_path is not None:
                label = process_csv_file(csv_file_path[:-4] + "csv" + captured_file[-32 + 8:-4] + "pcap_Flow.csv")
                d = {0: 'Safe',
                     1: 'DDoS',
                     2: 'Bot',
                     3: 'Infiltration',
                     4: 'Web Attack – zBrute Force',
                     5: 'Web Attack – XSS',
                     6: 'Web Attack – Sql Injection',
                     7: 'FTP-Patator',
                     8: 'SSH-Patator',
                     9: 'DoS slowloris',
                     -1: 'Error happened'
                     }
                delete_files(csv_file_path + captured_file[-32 + 8:-4] + "pcap")
                if label != 0:
                    show_error(d[label])

        time.sleep(wait_duration1)


if __name__ == "__main__":
    interface_to_capture = "Wi-Fi"
    output_folder_path = start_path
    capture_duration = 30
    wait_duration = 30*60
    loop_comp(interface_to_capture, output_folder_path, capture_duration, wait_duration)
